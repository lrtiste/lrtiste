extends ../../layout/main
include ../../partials/code
include ../../partials/content

block content
    style
        include ./samples/dropdowns.css
    h1 Dropdown menu component
    blockquote(cite='https://www.w3.org/TR/wai-aria-practices/#menu')
        p A menu is a widget that offers a list of choices to the user, such as a set of actions or functions. A menu is usually opened, or made visible, by activating a menu button[...]
    p The dropdown menu can be seen as a #[a(href='#foobar') an expandable section] with extra behaviour like keyboard interaction allowing to quickly move from one menu item to the other.
    section
        h2#contents Contents
        nav
            ul
                +contentEntry('#demo','Demo: dropdown menu using lrtiste')
                    ul
                        +contentEntry('#keyboard','Keyboard interaction')
                +contentEntry('#expandable','Expandable section comparison')
                +contentEntry('#lrtiste','Dropdown menu using lrtiste')
    section
        h2#demo Demo: dropdown menu using lrtiste
        include ./samples/dropdowns
        p You'll notice that using an absolute position for our menu can be troublesome as it will likely overlap other content on the page. It is "pretty" for sighted users but can turns wrong if Javascript fails, for example.
        h3#keyboard Keyboard interactions
        h4 When focus is on the toggle button
        ul
            li if the menu is not expanded yet ENTER, SPACE, DOWN ARROW will expand the menu and put focus on the first item
            li if the menu is expanded ENTER, SPACE, UP ARROW will collapse the menu
            li TAB will focus the next focusable element on the page, closing the menu
        h4 When focus is on a menuitem
        ul
            li LEFT and UP ARROW will select the previous menu item
            li RIGHT AND DOWN ARROW will select the next menu item
            li ESC will close the menu and put focus on the menu button
            li SHIFT TAB will focus the menu button, closing the menu
            li TAB will focus the next focusable element on the page, closing the menu
    section
        h2#expandable Expandable section comparison
        p In many aspects a dropdown menu follows the #[a(href='#foobar') expandable section] behaviour and you could follow its tutorial to get started with a progressive approach.
    section
        h2#lrtiste Dropdown menu using lrtiste
        p On top of the regular expandable section markup, we need to add the aria roles specific to menu and menu items. We can then let lrtiste do the job of managing aria states and providing expected keyboard interaction.
        div(data-lrtiste-tabs)
            ul(role='tablist')
                li(role='presentation')
                    a(href='#sample-markup', role='tab',aria-controls='sample-markup', aria-selected='true') Markup
                li(role='presentation')
                    a(href='#sample-markup', role='tab',aria-controls='sample-style') Theme
                li(role='presentation')
                    a(href='#sample-markup', role='tab',aria-controls='sample-script') Script
            div#sample-markup(role='tabpanel')
                h3(tabindex=0) index.html
                +code('dropdowns.pug')
            div#sample-style(role='tabpanel')
                h3(tabindex=0) theme.css
                +code('dropdowns.css')
                p The style is scoped to our component thanks to its id selector. In practice you would use a more generic selector such a class name.
            div#sample-script(role='tabpanel')
                h3(tabindex=0) index.js
                +code('index.js')
    script(src='./dropdowns.js')