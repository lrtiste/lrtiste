extends ../../layout/main
include ../../partials/code
include ../../partials/content

block content
    style
        include ./samples/tooltips.css
    h1 Tooltips components
    blockquote(cite='https://www.w3.org/TR/wai-aria-practices/#tooltip')
        p Popup that displays a description for an element when a user hovers over or focuses on that element. It should popup automatically when the user gives input focus to the widget or element with which it is associated.
    section
        h2#contents Contents
        nav
            ul
                +contentEntry('#demo', 'Demo: tooltip with keyboard interaction')
                +contentEntry('#css','CSS powered tooltip')
                +contentEntry('#script', 'Enhancement with Javascript')
    section
        h2#demo
        p The focusable element will display/provide a hint when the target element either has focus, either the mouse is over. However focus will remain on the target element.
        include ./samples/tooltips
    section
        h2#css CSS powered tooltip
        p By following the recommended markup, we add the #[code aria-describedby] attribute on the target and the #[code tooltip] role on the the hint. The idea then is to put the hint next to the target and use sibling css selector to reveal the tooltip.
        p Note with Javascript disabled, we can't hide the tooltip using the #[em esc] key
        div(data-lrtiste-tabs)
            ul(role='tablist')
                li(role='presentation')
                    a(href='#tooltip-1-markup', role='tab', aria-controls='tooltip-1-markup', aria-selected='true') Markup
                li(role='presentation')
                    a(href='#tooltip-1-style', role='tab', aria-controls='tooltip-1-style') Style
            div#tooltip-1-markup(role='tabpanel')
                h4(tabindex=0) index.html
                +code('tooltips.pug')
            div#tooltip-1-style(role='tabpanel')
                h4(tabindex=0) incex.css
                +code('tooltips.css')
    section
        h2#script Enhancement with Javascript
        p By using lrtiste we simply add the recommended keyboard access (esc should dismiss the tooltip when focus is on the target element)
        +code('index.js')
    script(src='./tooltips.js')